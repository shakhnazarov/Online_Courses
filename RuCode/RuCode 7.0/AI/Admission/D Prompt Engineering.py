n, max_price, min_quality = map(int, input().split())

ans = [0, max_price + 1, -1]  # n_i, price, quality
for i in range(n):
    n_i, price, quality = map(int, input().split())

    if price <= max_price and quality >= min_quality:
        if price < ans[1]:
            ans = [n_i, price, quality]
        elif price == ans[1] and quality > ans[2]:
            ans = [n_i, price, quality]

print(ans[0])

# ловит TL на последних тестах










"""
Пока вы разбирались с тонкостями современных генеративных моделей, компания RuCoding приняла новый вызов. Совет директоров решил освоить рынок дропшиппинга: капитал позволяет занять свою нишу, а потенциальные прибыли сулят большие перспективы для роста.

Однако как всегда нашлись и подводные камни. Чтобы много заработать, необходимо продавать сотни тысяч товаров, а для этого нужны люди, которые будут регистрировать товары в разных маркетплейсах. Правда, если нанять много людей, то их зарплаты съедят большую часть прибылей, а если не нанимать, то и заработка не будет. Да и найдётся ли достаточно работников, согласных изо дня в день с утра и до вечера заполнять однотипные карточки? Всё-таки работа скучная, а сейчас всем нужны творческие задачи.

В общем, все эти риски огорчили топ-менеджеров до глубины души. Правда, на очередном совещании возникла идея: “А давайте работать будут роботы, а не человек?” - предложил один из руководителей.

Действительно, идея оказалась заманчива: по сравнению с людьми роботы требуют гораздо меньших затрат, а работать они готовы круглосуточно даже над самыми скучными задачами.

Руководство обратилось в AI-отдел, но у них беклог оказался занят на квартал вперёд и все задачи в нём очень важные - ни одну не подвинуть. Да и сами программисты не особо хотят браться за разработку. Говорят, не их уровня задача: “Подумаешь, всего-то и требуется написать prompt для ChatGPT”.

Узнав о сложившейся ситуации, вы решили продемонстрировать всем, что любознательность - очень полезное качество.

Недавно вы как раз освоили работу с большими генеративными сетями, поэтому вам не составило труда быстро придумать шаблон для генерации описания товара. Вы пришли к руководству с решением, но его качество не устроило топ-менеджеров.

Тогда вы решили добавить примеры в шаблон, чтобы улучшить генерацию. Сработало! Теперь описание товаров было на уровне профессионального копирайтера. Руководители уже собирались отпраздновать успешное, как вдруг улыбка на их лице исчезла. Из-за большого количества примеров в шаблоне цена одного запроса стала непозволительно большой. Прибыль снова оказалась под угрозой.

К счастью, вы и из этой ситуации нашли выход. Необязательно добавлять все примеры в prompt. Достаточно вставить оптимальное количество, чтобы и ценой, и качеством топ-менеджеры остались довольны.

Правда, сделать это нужно эффективным способом, ведь качество могут оценить только руководители, а их время на вес золота.

Хорошо, что вы любознательны. Ведь и для этой задачи вы знаете решение. Осталось только его реализовать.

Формат ввода
В первой строке дано 3 числа:
1.
n
n - Суммарное количество примеров. Целое число от
1
1 до
1
0
5
10
5

2. max_price - Максимально допустимая цена для 1 запроса. Целое число от
0
0 до
2
16
2
16

3. min_quality - Минимальное качество, которое устроит руководителей. Целое число от 0 до 100.

Далее идёт
n
n строк. В каждой строке 3 числа:
1.
n
i
n
i
​
  - Количество примеров в шаблоне
2. price - Цена за один запрос. Целое число от
0
0 до
2
16
2
16

3. quality - Получаемое качество генерации. Целое число от
0
0 до
100
100.

Гарантируется, что цена и качество монотонно не убывают при росте
n
i
n
i
​
 .

Формат вывода
Единственное число - оптимальное количество примеров. Если таковых не найдётся, выведите 0.
"""